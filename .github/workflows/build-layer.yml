name: Build Basic pyodbc Layer

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-layer:
    runs-on: ubuntu-latest
    steps:
      - name: Build Layer Manually
        run: |
          # Create layer directory structure
          mkdir -p layer/python/lib/python3.9/site-packages
          
          # Install pyodbc
          pip install pyodbc -t layer/python/lib/python3.9/site-packages
          
          # Create minimal odbcinst.ini
          mkdir -p layer/opt
          echo '[ODBC Driver 17 for SQL Server]' > layer/opt/odbcinst.ini
          echo 'Description=Microsoft ODBC Driver 17 for SQL Server' >> layer/opt/odbcinst.ini
          echo 'Driver=/opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.10.so.4.1' >> layer/opt/odbcinst.ini
          
          # Create zip file
          cd layer
          zip -r ../pyodbc-layer.zip .
          
          # Print size and contents
          cd ..
          ls -la pyodbc-layer.zip
          echo "Layer created: $(du -h pyodbc-layer.zip | cut -f1)"
          
          # Base64 encode the file (for manual download)
          echo "LAYER_BASE64=$(base64 -w 0 pyodbc-layer.zip)" >> $GITHUB_ENV
      
      - name: Display Download Information
        run: |
          echo "Layer has been built successfully."
          echo "To download it, copy the base64-encoded content from the workflow log"
          echo "and decode it locally using:"
          echo "  1. For Windows: certutil -decode layer.b64 pyodbc-layer.zip"
          echo "  2. For Mac/Linux: base64 -d layer.b64 > pyodbc-layer.zip"
          
          # Print first few characters to identify the content in logs
          echo "Layer Base64 encoded content (first 100 chars):"
          echo "${LAYER_BASE64:0:100}..."
          
          # Store in output file
          echo "$LAYER_BASE64" > layer.b64
          
          # Print file stats
          ls -la layer.b64
